/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    hand: THREE.SkinnedMesh;
    bone000: THREE.Bone;
  };
  materials: {
    ['Material #46']: THREE.MeshStandardMaterial;
  };
};

export default function HandMesh({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null!);
  const { nodes, materials } = useGLTF(
    '/gltf/hand_model_rigged.glb'
  ) as GLTFResult;
  useFrame(() => {
    const thumb_mcp = nodes.hand.skeleton.getBoneByName('bone002');
    const thumb_ip = nodes.hand.skeleton.getBoneByName('bone003');

    if (thumb_mcp && thumb_ip) {
      // thumb_mcp.rotation.y = Math.sin(performance.now() / 1000) / 2 + 0.5;
      // console.log(thumb_mcp.position.y);
      thumb_ip.rotation.x = Math.sin(performance.now() / 1000) / 2 + 1;
    }
  });
  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.bone000} />
      <skinnedMesh
        geometry={nodes.hand.geometry}
        material={materials['Material #46']}
        skeleton={nodes.hand.skeleton}
      />
    </group>
  );
}

useGLTF.preload('/gltf/hand_model_rigged.glb');
